/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/taxprofiler Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Force-disable all reporting features to prevent S3 directory creation attempts
trace.enabled = false
timeline.enabled = false
report.enabled = false
dag.enabled = false

// If any tracing slips through, redirect to local ephemeral storage
trace.dir = '/tmp/trace/'
timeline.file = '/tmp/timeline.html'
report.file = '/tmp/report.html'
dag.file = '/tmp/dag.html'

// Global default params, used in configs
params {

    // Input options
    input                      = null

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    help_full                    = false
    show_hidden                  = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'
    trace_report_suffix          = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')// Config options
    config_profile_name        = null
    config_profile_description = null

    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Schema validation default options
    validate_params            = true

    // Databases
    databases               = null
    save_untarred_databases = false

    // FASTQ preprocessing
    skip_preprocessing_qc            = false
    preprocessing_qc_tool            = 'fastqc'

    perform_shortread_qc             = false
    shortread_qc_tool                = 'fastp'
    shortread_qc_skipadaptertrim     = false
    shortread_qc_mergepairs          = false
    shortread_qc_includeunmerged     = false
    shortread_qc_adapter1            = null
    shortread_qc_adapter2            = null
    shortread_qc_adapterlist         = null
    shortread_qc_minlength           = 15
    shortread_qc_dedup               = false

    perform_longread_qc                   = false
    longread_adapterremoval_tool          = 'porechop_abi'
    longread_qc_skipadaptertrim           = false
    longread_qc_skipqualityfilter         = false
    longread_filter_tool                  = 'nanoq'
    longread_qc_qualityfilter_minlength   = 1000
    longread_qc_qualityfilter_keeppercent = 90
    longread_qc_qualityfilter_minquality  = 7
    longread_qc_qualityfilter_targetbases = 500000000

    save_preprocessed_reads          = false

    // Redundancy estimation
    perform_shortread_redundancyestimation = false
    shortread_redundancyestimation_mode = 'kmer'

    // Complexity filtering
    perform_shortread_complexityfilter                   = false
    shortread_complexityfilter_tool                      = 'bbduk'
    shortread_complexityfilter_entropy                   = 0.3
    shortread_complexityfilter_bbduk_windowsize          = 50
    shortread_complexityfilter_bbduk_mask                = false
    shortread_complexityfilter_prinseqplusplus_mode      = 'entropy'
    shortread_complexityfilter_prinseqplusplus_dustscore = 0.5
    shortread_complexityfilter_fastp_threshold           = 30
    save_complexityfiltered_reads                        = false

    // run merging
    perform_runmerging          = false
    save_runmerged_reads        = false

    // Host Removal
    perform_shortread_hostremoval          = false
    perform_longread_hostremoval           = false
    hostremoval_reference                  = null
    shortread_hostremoval_index            = null
    longread_hostremoval_index             = null
    save_hostremoval_index                 = false
    save_hostremoval_bam                    = false
    save_hostremoval_unmapped              = false

    // Publishing final reads going into profiling
    save_analysis_ready_fastqs = false

    // MALT
    run_malt                   = false
    malt_mode                  = 'BlastN'
    malt_generate_megansummary = false
    malt_save_reads            = false // added via map + database args extension in profiling.nf

    // kraken2
    run_kraken2                      = false
    kraken2_save_reads               = false // added directly to module in profiling.nf
    kraken2_save_readclassifications = false // added directly to module in profiling.nf
    kraken2_save_minimizers          = false

    //krakenuniq
    run_krakenuniq                      = false
    krakenuniq_ram_chunk_size           = '16G'
    krakenuniq_save_reads               = false // added directly to module in profiling.nf
    krakenuniq_save_readclassifications = false // added directly to module in profiling.nf
    krakenuniq_batch_size               = 20

    // Bracken
    run_bracken                      = false
    bracken_save_intermediatekraken2 = false

    // centrifuge
    run_centrifuge             = false
    centrifuge_save_reads      = false // added directly to module in profiling.nf

    // metaphlan
    run_metaphlan              = false

    // kaiju
    run_kaiju                  = false
    kaiju_expand_viruses       = false
    kaiju_taxon_rank           = 'species'

    // diamond
    run_diamond                = false
    diamond_output_format      = 'tsv'  // TSV is only format with taxonomic information apparently
    diamond_save_reads         = false // this will override default diamond output format so no taxonomic profile is generated! added directly to module in profiling.nf

    // mOTUs
    run_motus                       = false
    motus_use_relative_abundance    = false
    motus_remove_ncbi_ids           = false
    motus_save_mgc_read_counts      = false

    // kmcp
    run_kmcp               = false
    kmcp_save_search       = false

    // ganon
    run_ganon                       = false
    ganon_report_type               = 'reads'
    ganon_report_rank               = 'default'
    ganon_report_toppercentile      = 0
    ganon_report_mincount           = 0
    ganon_report_maxcount           = 0
    ganon_save_readclassifications  = false

    // krona
    run_krona                  = false
    krona_taxonomy_directory   = null

    // profile standardisation
    run_profile_standardisation             = false
    standardisation_taxpasta_format         = 'tsv'
    taxpasta_taxonomy_dir                   = null
    taxpasta_add_name                       = false
    taxpasta_add_rank                       = false
    taxpasta_add_lineage                    = false
    taxpasta_add_idlineage                  = false
    taxpasta_add_ranklineage                = false
    taxpasta_ignore_errors                  = false
    standardisation_motus_generatebiom      = false
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'
// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'



profiles {
    standard {
    // --- Core HealthOmics settings ---
    workDir = 's3://chlacpm/shared/private/hhakimjavadi/tmNGS_microbiology_chla/taxprofiler/work/'
    fusion {
        enabled = true
    }
    process {
        scratch = false
    }

    // --- Explicit Container Definitions for ECR ---
    withName: 'FASTQC|FASTQC_PROCESSED' {
        container = '180838913289.dkr.ecr.us-west-2.amazonaws.com/fastqc:0.12.1--hdfd78af_0'
    }
    withName: 'FASTP_SINGLE|FASTP_PAIRED' {
        container = '180838913289.dkr.ecr.us-west-2.amazonaws.com/fastp:0.23.4--h5f740d0_0'
    }
    withName: 'BOWTIE2_ALIGN' {
        container = '180838913289.dkr.ecr.us-west-2.amazonaws.com/bowtie2:2.5.1--py310h4011239_1'
    }
    withName: 'SAMTOOLS_VIEW|SAMTOOLS_SORT|SAMTOOLS_STATS|SAMTOOLS_FASTQ' {
        container = '180838913289.dkr.ecr.us-west-2.amazonaws.com/samtools:1.18--h50ea8bc_1'
    }
    withName: 'KRAKEN2_KRAKEN2' {
        container = '180838913289.dkr.ecr.us-west-2.amazonaws.com/kraken2:2.1.2--pl5321h9f5ad1d_2'
    }
    withName: 'TAXPASTA_MERGE|TAXPASTA_STANDARDISE' {
        container = '180838913289.dkr.ecr.us-west-2.amazonaws.com/taxpasta:0.14.0--pyh864c313_0'
    }
}
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }
    test                                 { includeConfig 'conf/test.config'                          }
    test_full                            { includeConfig 'conf/test_full.config'                     }
    test_noprofiling                     { includeConfig 'conf/test_noprofiling.config'              }
    test_nopreprocessing                 { includeConfig 'conf/test_nopreprocessing.config'          }
    test_nothing                         { includeConfig 'conf/test_nothing.config'                  }
    test_motus                           { includeConfig 'conf/test_motus.config'                    }
    test_krakenuniq                      { includeConfig 'conf/test_krakenuniq.config'               }
    test_malt                            { includeConfig 'conf/test_malt.config'                     }
    test_falco                           { includeConfig 'conf/test_falco.config'                    }
    test_fastp                           { includeConfig 'conf/test_fastp.config'                    }
    test_alternativepreprocessing        { includeConfig 'conf/test_alternativepreprocessing.config' }
    test_bbduk                           { includeConfig 'conf/test_bbduk.config'                    }
    test_prinseqplusplus                 { includeConfig 'conf/test_prinseqplusplus.config'          }
}

// Load nf-core custom profiles from different Institutions - disabled to prevent remote fetch warnings
includeConfig "/dev/null"  // Override to skip nfcore_custom.config

// Load nf-core/taxprofiler custom profiles from different institutions - disabled
includeConfig "/dev/null"  // Override to skip taxprofiler.config

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = '1'
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

timeline {
    enabled = false
}
report {
    enabled = true
}
trace {
    enabled = false
}
dag {
    enabled = false
}

manifest {
    name            = 'nf-core/taxprofiler'
    author          = """James A. Fellows Yates, Sofia Stamouli, Moritz E. Beber, Lili Andersson-Li, and the nf-core/taxprofiler team""" // Retained for compatibility; contributors details can be in README
    homePage        = 'https://github.com/nf-core/taxprofiler'
    description     = """Taxonomic classification and profiling of shotgun short- and long-read metagenomic data"""
    mainScript      = 'main.nf'
    defaultBranch   = 'master'
    nextflowVersion = '!>=23.10.0'  // Downgraded for HealthOmics compatibility
    version         = '1.2.3'
    doi             = '10.1101/2023.10.20.563221'
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.3.0' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}


validation {
    monochromeLogs = params.monochrome_logs
    help {
        enabled = true
        command = "nextflow run nf-core/taxprofiler -profile <docker/singularity/.../institute> --input samplesheet.csv --outdir <OUTDIR>"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
        beforeText = """
-\033[2m----------------------------------------------------\033[0m-
                                        \033[0;32m,--.\033[0;30m/\033[0;32m,-.\033[0m
\033[0;34m        ___     __   __   __   ___     \033[0;32m/,-._.--~\'\033[0m
\033[0;34m  |\\ | |__  __ /  ` /  \\ |__) |__         \033[0;33m}  {\033[0m
\033[0;34m  | \\| |       \\__, \\__/ |  \\ |___     \033[0;32m\\`-._,-`-,\033[0m
                                        \033[0;32m`._,._,\'\033[0m
\033[0;35m  nf-core/taxprofiler ${manifest.version}\033[0m
-\033[2m----------------------------------------------------\033[0m-
"""
        afterText = """${manifest.doi ? "\n* The pipeline\n" : ""}${manifest.doi.tokenize(",").collect { "    https://doi.org/${it.trim().replace('https://doi.org/','')}"}.join("\n")}${manifest.doi ? "\n" : ""}
* The nf-core framework
    https://doi.org/10.1038/s41587-020-0439-x

* Software dependencies
    https://github.com/nf-core/taxprofiler/blob/master/CITATIONS.md
"""
    }
    summary {
        beforeText = validation.help.beforeText
        afterText = validation.help.afterText
    }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'
